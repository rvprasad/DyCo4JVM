// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    flatDir dirs: ['../utility/build/libs/', '../logging/build/libs/']
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the groovy plugin to add support for Groovy
apply plugin: 'groovy'

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.ow2.asm:asm:5.2'
    compile 'org.ow2.asm:asm-commons:5.2'
    compile 'org.ow2.asm:asm-tree:5.2'
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.slf4j:slf4j-api:1.7.22'
    compile ":dyco4j-logging:$DYCO4J_LOGGING_VERSION"
    compile ":dyco4j-utility:$DYCO4J_UTILITY_VERSION"
    runtime 'com.google.code.gson:gson:2.8.0'

    testCompile 'org.slf4j:slf4j-simple:1.7.22'
    testCompile 'com.google.code.gson:gson:2.8.0'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.7'
    testCompile 'junit:junit:4.12'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs << '-Xlint'
}

task copyLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

test {
    systemProperty 'logging.jar', configurations.compile.files { it ==~ /.*dyco4j-logging.*/ }[0]
    exclude '**/CLITestSubject.class'
    exclude '**/CLIClassPathConfigTestSubject.class'
    exclude '**/Pair.class'
}

task entryJar(type: Jar) {
    dependsOn copyLibs, test
    baseName 'dyco4j'
    appendix 'entry'
    classifier 'cli'
    from sourceSets.main.output
    exclude '**/internals/**'
    manifest {
        attributes (
            'Main-Class': 'dyco4j/instrumentation/entry/CLI',
            'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
        )
    }
}

task internalsJar(type: Jar) {
    dependsOn copyLibs, test
    baseName 'dyco4j'
    appendix 'internals'
    classifier 'cli'
    from sourceSets.main.output
    exclude '**/entry/**'
    manifest {
        attributes(
                'Main-Class': 'dyco4j/instrumentation/internals/CLI',
                'Class-Path': configurations.runtime.collect { it.getName() }.join(' ')
        )
    }
}

jar {
    actions = []
    dependsOn entryJar, internalsJar
}

task entryFatJar(type: Jar) {
    manifest.from entryJar.manifest
    baseName 'dyco4j'
    appendix 'entry'
    classifier 'all'
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        configurations.testCompile.filter { it ==~ ".*slf4j.*" }.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    with entryJar
}

task internalsFatJar(type: Jar) {
    manifest.from internalsJar.manifest
    baseName 'dyco4j'
    appendix 'internals'
    classifier 'all'
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        configurations.testCompile.filter { it ==~ ".*slf4j.*" }.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    with internalsJar
}

task fatJars() {
    dependsOn entryFatJar, internalsFatJar
}

artifacts {
    archives entryJar
    archives internalsJar
}

// Apply jacoco plugin to add support for code coverage
apply plugin: "jacoco"

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

version = '1.0.0'

